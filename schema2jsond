#!/usr/bin/env python
# Daniel Oskarsson <daniel.oskarsson@gmail.com>

import json, os
from collections import OrderedDict
from sys import argv

def nullable(data):
	try:
		if data["oneOf"][0]["type"] == "null":
			return (True, data["oneOf"][1])
	except:
		return (False, data)

def parse(data):
	if (type(data) is OrderedDict and "$ref" in data.keys()):
		return data["$ref"]
	elif (type(data) is OrderedDict and "format" in data.keys()):
		return data["format"]
	elif (type(data) is OrderedDict and "anyOf" in data.keys()):
		return parse(data["anyOf"])
	elif (type(data) is list):
		array = list()
		for value in data:
			array.append(parse(value))
		return array
	# type(data) can be an array of e.g. type and null
	elif "type" not in data.keys():
		pass
	elif data["type"] == "object":
		required = list() if not "required" in data.keys() else data["required"]
		object = OrderedDict()
		if "properties" not in data.keys():
			return object
		for key in data["properties"]:
			null = nullable(data["properties"][key])
			value = parse(null[1])
			if key not in required:
				key += ":undefined"
			if null[0] == True:
				key += ":null"
			object[key] = value
		return object
	elif data["type"] == "array":
		return parse(data["items"]);
	elif data["type"] == "string":
		return"string"
	elif data["type"] == "boolean":
		return"boolean"
	elif data["type"] == "number":
		return"number"
	elif data["type"] == "integer":
		return "integer"

data = open(argv[1],'r').read() if os.path.isfile(argv[1]) else argv[1]
print json.dumps(parse(json.loads(data, object_pairs_hook=OrderedDict)), indent = 4)
